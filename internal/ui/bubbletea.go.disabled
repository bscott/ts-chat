// This file is currently not used. We'll implement a simpler UI solution first.
/*
package ui

import (
	"fmt"
	"strings"
	"time"
	
	"github.com/charmbracelet/bubbles/viewport"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)
*/

var (
	// Style definitions
	titleStyle = lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("#FAFAFA")).
		Background(lipgloss.Color("#7D56F4")).
		PaddingLeft(2).
		PaddingRight(2).
		Width(76)
	
	chatStyle = lipgloss.NewStyle().
		BorderStyle(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("#383838")).
		Padding(1, 2)
	
	inputPromptStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#7D56F4")).
		Bold(true)
	
	systemMsgStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#43BF6D")).
		Bold(true)
	
	userMsgStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#1D9BF0"))
	
	selfMsgStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#874BFD")).
		Bold(true)
	
	actionMsgStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#F25D94")).
		Italic(true)
	
	timestampStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#999999")).
		Width(10)
)

// Model represents the bubbletea UI model
type Model struct {
	Viewport    viewport.Model
	Messages    []string
	Input       string
	Cursor      int
	Ready       bool
	Width       int
	Height      int
	Nickname    string
	SendMessage func(string)
}

// InitialModel creates a new model with default values
func InitialModel(nickname string, sendMessage func(string)) Model {
	return Model{
		Messages:    []string{},
		Input:       "",
		Cursor:      0,
		Ready:       false,
		Nickname:    nickname,
		SendMessage: sendMessage,
	}
}

// Init initializes the model
func (m Model) Init() tea.Cmd {
	return nil
}

// Update updates the model based on messages
func (m Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var (
		cmd  tea.Cmd
		cmds []tea.Cmd
	)
	
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c":
			return m, tea.Quit
		case "enter":
			if m.Input != "" {
				if strings.HasPrefix(m.Input, "/") {
					// Send command directly
					m.SendMessage(m.Input)
				} else {
					// Send regular message
					m.SendMessage(m.Input)
				}
				m.Input = ""
			}
		case "backspace":
			if len(m.Input) > 0 {
				m.Input = m.Input[:len(m.Input)-1]
			}
		default:
			if msg.Type == tea.KeyRunes {
				m.Input += string(msg.Runes)
			}
		}
	
	case tea.WindowSizeMsg:
		headerHeight := lipgloss.Height(m.headerView())
		footerHeight := lipgloss.Height(m.footerView())
		verticalMarginHeight := headerHeight + footerHeight
		
		if !m.Ready {
			// First time sizing the viewport
			m.Viewport = viewport.New(msg.Width, msg.Height-verticalMarginHeight-1)
			m.Viewport.YPosition = headerHeight
			m.Viewport.HighPerformanceRendering = true
			m.Ready = true
		} else {
			m.Viewport.Width = msg.Width
			m.Viewport.Height = msg.Height - verticalMarginHeight - 1
		}
		
		m.Width = msg.Width
		m.Height = msg.Height
	
	case ChatMessage:
		// Add the message to the view
		m.Messages = append(m.Messages, msg.Format())
		m.Viewport.SetContent(strings.Join(m.Messages, "\n"))
		cmds = append(cmds, m.Viewport.GotoBottom)
	}
	
	// Handle viewport update
	m.Viewport, cmd = m.Viewport.Update(msg)
	cmds = append(cmds, cmd)
	
	return m, tea.Batch(cmds...)
}

// View renders the UI
func (m Model) View() string {
	if !m.Ready {
		return "Initializing..."
	}
	
	// Put it all together
	return fmt.Sprintf("%s\n%s\n%s", 
		m.headerView(),
		m.Viewport.View(),
		m.footerView())
}

// headerView renders the header
func (m Model) headerView() string {
	title := titleStyle.Render(fmt.Sprintf(" ğŸ’¬ Chat Room - Connected as %s ", m.Nickname))
	line := strings.Repeat("â”€", max(0, m.Width-lipgloss.Width(title)))
	return lipgloss.JoinHorizontal(lipgloss.Center, title, line)
}

// footerView renders the input area
func (m Model) footerView() string {
	prompt := inputPromptStyle.Render("> ")
	input := m.Input + " "
	return prompt + input
}

// ChatMessage represents a chat message to be displayed
type ChatMessage struct {
	From      string
	Content   string
	Timestamp time.Time
	IsSystem  bool
	IsAction  bool
	IsSelf    bool
}

// Format formats a chat message for display
func (m ChatMessage) Format() string {
	timeStr := timestampStyle.Render(m.Timestamp.Format("15:04:05"))
	
	if m.IsSystem {
		return fmt.Sprintf("%s %s", timeStr, systemMsgStyle.Render(m.Content))
	} else if m.IsAction {
		return fmt.Sprintf("%s %s", timeStr, actionMsgStyle.Render(fmt.Sprintf("* %s %s", m.From, m.Content)))
	} else if m.IsSelf {
		return fmt.Sprintf("%s %s: %s", timeStr, selfMsgStyle.Render("You"), m.Content)
	} else {
		return fmt.Sprintf("%s %s: %s", timeStr, userMsgStyle.Render(m.From), m.Content)
	}
}

// max returns the maximum of two integers
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}